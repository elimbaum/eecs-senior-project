# mandelbrot set generator

# ascii gradient: [ .:-=+*#%@]
def printdensity(d)
  if d > 128 then
    putchard(64) # @
  else if d > 64 then
    putchard(35) # #
  else if d > 32 then
    putchard(43) # +
  else if d > 16 then
    putchard(61) # =
  else if d > 8 then
    putchard(45) # -
  else if d > 4 then
    putchard(58) # :
  else if d > 2 then
    putchard(46) # .
  else
    putchard(32) # space
  ;

# determine whether specific location diverges
# z = z^2 + c
def mandelconverger(real imag iters creal cimag)
  if iters > 255 | (real * real + imag * imag > 4) then
    iters
  else mandelconverger(real * real - imag * imag + creal,
                       2 * real * imag + cimag,
                       iters + 1, creal, cimag);

def mandelconverge(real imag)
  mandelconverger(real, imag, 0, real, imag);

def mandelhelp(xmin xmax xstep  ymin ymax ystep)
  for y = ymin, y < ymax, ystep in (
    (for x = xmin, x < xmax, xstep in
      printdensity(mandelconverge(x, y)))
    : putchard(10))

# print mandel @ location with magnification
def mandel(realstart imagstart realmag imagmag)
  mandelhelp(realstart, realstart + realmag * 78, realmag,
             imagstart, imagstart + imagmag * 30, imagmag);
